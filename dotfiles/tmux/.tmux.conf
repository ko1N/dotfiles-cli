# terminal color configuration
set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm-256color:RGB"

set -ga terminal-features "*:hyperlinks:RGB:clipboard:cstyle:extkeys:usstyle"
set -ga terminal-features ",xterm-kitty:extkeys"

set-option -gw xterm-keys on
set -g extended-keys always
set -s extended-keys on

# prefix
# set -g prefix C-s
# bind C-s send-prefix
set -g prefix C-Space
bind C-Space send-prefix

# home row mod prefix
set -g prefix2 C-f
bind C-f send-prefix
#set -g prefix C-j
#bind C-k send-prefix

# global options
set -g base-index 1              # start windows at index 0 / alternative: 1
# set -g pane-base-index 1
# set-window-option -g pane-base-index 1
set -g detach-on-destroy off     # don't exit from tmux when closing a session
set -g escape-time 0             # zero-out escape time delay
set -g history-limit 1000000     # increase scroll history
set -g renumber-windows on       # renumber windows if they are closed
set -g set-clipboard on          # use system clipboard
set -g status-position bottom    # status bar position
setw -g mode-keys vi             # enable vi keybinds
set -g mouse on                  # enable mouse

# reload config
unbind r
bind r source-file ~/.tmux.conf \; display ".tmux.conf reloaded"

# Dynamic split creation with M-Enter
# Split horizontally if pane is wider than tall (accounting for character aspect ratio)
bind-key -n 'M-Enter' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    'split-window -h -c "#{pane_current_path}"' \
    'if-shell "[ $(tmux display-message -p \"#{pane_width}\") -gt $(( $(tmux display-message -p \"#{pane_height}\") * 25 / 10 )) ]" \
        "split-window -h -c \"#{pane_current_path}\"" \
        "split-window -v -c \"#{pane_current_path}\""'

# create new window
bind-key -n 'M-S-Enter' new-window

# always start new panes in the current pwd
bind 's' split-window -v -c "#{pane_current_path}"
bind 'h' split-window -h -c "#{pane_current_path}"

# vim binds with tmux/fzf integration
# Smart pane/window navigation with C-h and C-l
# This script checks if there are multiple panes and if we're at the edge before switching windows
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' \
#     'if-shell -b "[ $(tmux display-message -p \"#{window_panes}\") -eq 1 ]" \
#         "previous-window" \
#         "if-shell \"[ $(tmux display-message -p \\\"#{pane_at_left}\\\") -eq 1 ]\" \
#             \"previous-window\" \
#             \"select-pane -L\""'
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' \
#     'if-shell -b "[ $(tmux display-message -p \"#{window_panes}\") -eq 1 ]" \
#         "next-window" \
#         "if-shell \"[ $(tmux display-message -p \\\"#{pane_at_right}\\\") -eq 1 ]\" \
#             \"next-window\" \
#             \"select-pane -R\""'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# switching windows
bind-key -n 'M-Tab' next-window
bind-key -n 'M-S-Tab' previous-window # doesnt work on most terminals

# Smart pane/window navigation with M-h and M-l
# This script checks if there are multiple panes and if we're at the edge before switching windows
# TODO: on wraparound choose left/right-most pane
bind-key -n 'M-h' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    '' \
    'if-shell "[ $(tmux display-message -p \"#{pane_at_left}\") -eq 1 ]" \
        "" \
        "select-pane -L"'
# bind-key -n 'M-h' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
#     'previous-window' \
#     'if-shell "[ $(tmux display-message -p \"#{pane_at_left}\") -eq 1 ]" \
#         "previous-window" \
#         "select-pane -L"'
bind-key -n 'M-j' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    '' \
    'if-shell "[ $(tmux display-message -p \"#{pane_at_bottom}\") -eq 1 ]" \
        "" \
        "select-pane -D"'
# bind-key -n 'M-j' select-pane -D
bind-key -n 'M-k' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    '' \
    'if-shell "[ $(tmux display-message -p \"#{pane_at_top}\") -eq 1 ]" \
        "" \
        "select-pane -U"'
# bind-key -n 'M-k' select-pane -U
bind-key -n 'M-l' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    '' \
    'if-shell "[ $(tmux display-message -p \"#{pane_at_right}\") -eq 1 ]" \
        "" \
        "select-pane -R"'
# bind-key -n 'M-l' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
#     'next-window' \
#     'if-shell "[ $(tmux display-message -p \"#{pane_at_right}\") -eq 1 ]" \
#         "next-window" \
#         "select-pane -R"'

# Select window or create it if it doesn't exist
bind-key -n 'M-0' if-shell 'tmux select-window -t :=0' '' 'new-window -t :=0'
bind-key -n 'M-1' if-shell 'tmux select-window -t :=1' '' 'new-window -t :=1'
bind-key -n 'M-2' if-shell 'tmux select-window -t :=2' '' 'new-window -t :=2'
bind-key -n 'M-3' if-shell 'tmux select-window -t :=3' '' 'new-window -t :=3'
bind-key -n 'M-4' if-shell 'tmux select-window -t :=4' '' 'new-window -t :=4'
bind-key -n 'M-5' if-shell 'tmux select-window -t :=5' '' 'new-window -t :=5'
bind-key -n 'M-6' if-shell 'tmux select-window -t :=6' '' 'new-window -t :=6'
bind-key -n 'M-7' if-shell 'tmux select-window -t :=7' '' 'new-window -t :=7'
bind-key -n 'M-8' if-shell 'tmux select-window -t :=8' '' 'new-window -t :=8'
bind-key -n 'M-9' if-shell 'tmux select-window -t :=9' '' 'new-window -t :=9'

# resize panes using ctrl+alt+hjkl
bind-key -n 'C-M-h' if-shell "$is_vim" 'send-keys C-M-h' 'resize-pane -L 6'
bind-key -n 'C-M-j' if-shell "$is_vim" 'send-keys C-M-j' 'resize-pane -D 6'
bind-key -n 'C-M-k' if-shell "$is_vim" 'send-keys C-M-k' 'resize-pane -U 6'
bind-key -n 'C-M-l' if-shell "$is_vim" 'send-keys C-M-l' 'resize-pane -R 6'

# re-order panes via alt+shift+hjkl
bind-key -n 'M-S-h' swap-pane -U
bind-key -n 'M-S-j' swap-pane -D
bind-key -n 'M-S-k' swap-pane -U
bind-key -n 'M-S-l' swap-pane -D

bind-key -n 'M-[' swap-pane -U
bind-key -n 'M-]' swap-pane -D

# vi copy mode binds
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# plugins cheat sheet:
# reload config: prefix + r
# install plugins: prefix + I
# update plugins: prefix + u
# clean plugins: prefix + alt + u

# plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'christoomey/vim-tmux-navigator'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'

set -g @tmux-which-key-disable-autobuild '1'
set -g @plugin 'alexwforsythe/tmux-which-key'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_action 'copy-pipe'

set -g @plugin 'omerxx/tmux-sessionx'
set -g @sessionx-bind-zo-new-window 'ctrl-y'
set -g @sessionx-auto-accept 'off'
set -g @sessionx-custom-paths ''
#set -g @sessionx-x-path '~/dotfiles'
set -g @sessionx-bind 'o'
set -g @sessionx-window-height '85%'
set -g @sessionx-window-width '75%'
set -g @sessionx-zoxide-mode 'on'
set -g @sessionx-custom-paths-subdirectories 'false'
set -g @sessionx-filter-current 'false'

set -g @plugin 'omerxx/tmux-floax'
set -g @floax-width '80%'
set -g @floax-height '80%'
set -g @floax-border-color '#61AFEF'
set -g @floax-text-color 'blue'
set -g @floax-bind 'p'
set -g @floax-change-path 'true'

# tokyo-night
set -g @plugin "janoamaral/tokyo-night-tmux"
set -g @tokyo-night-tmux_theme night
set -g @tokyo-night-tmux_transparent 0
set -g @tokyo-night-tmux_window_id_style dsquare
set -g @tokyo-night-tmux_pane_id_style hsquare
set -g @tokyo-night-tmux_zoom_id_style dsquare
set -g @tokyo-night-tmux_show_path 1
set -g @tokyo-night-tmux_path_format relative

# load plugins
run '~/.tmux/plugins/tpm/tpm'

# Apply border colors
set -g pane-border-style fg=#323640
# set -g pane-active-border-style fg=#61AFEF

# Set a variable to track if we're in an SSH session
if-shell '[ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]' \
  'set-environment -g TMUX_IN_SSH "1"' \
  'set-environment -g TMUX_IN_SSH "0"'

# Set initial border color based on SSH session status
if-shell '[ "$TMUX_IN_SSH" = "1" ]' \
  'set -g pane-active-border-style fg=#f7768e' \
  'set -g pane-active-border-style fg=#7aa2f7'

# Set initial status bar color based on SSH session status
if-shell '[ "$TMUX_IN_SSH" = "1" ]' \
  'set -g status-left "#[fg=#323640,bg=#f7768e,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S$hostname #[fg=#f7768e,bg=default]"' \
  'set -g status-left "#[fg=#323640,bg=#7aa2f7,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S$hostname #[fg=#7aa2f7,bg=default]"'

# Change border color based on SSH status
set-hook -g window-pane-changed 'if-shell "[ \"$TMUX_IN_SSH\" = \"0\" ] && ps -o state= -o comm= -t \"#{pane_tty}\" | grep -iqE \"ssh\"" "set -g pane-active-border-style fg=#e0af68" "if-shell \"[ \\\"$TMUX_IN_SSH\\\" = \\\"1\\\" ]\" \"set -g pane-active-border-style fg=#f7768e\" \"set -g pane-active-border-style fg=#7aa2f7\""'
set-hook -g after-split-window 'if-shell "[ \"$TMUX_IN_SSH\" = \"0\" ] && ps -o state= -o comm= -t \"#{pane_tty}\" | grep -iqE \"ssh\"" "set -g pane-active-border-style fg=#e0af68" "if-shell \"[ \\\"$TMUX_IN_SSH\\\" = \\\"1\\\" ]\" \"set -g pane-active-border-style fg=#f7768e\" \"set -g pane-active-border-style fg=#7aa2f7\""'
set-hook -g pane-focus-in 'if-shell "[ \"$TMUX_IN_SSH\" = \"0\" ] && ps -o state= -o comm= -t \"#{pane_tty}\" | grep -iqE \"ssh\"" "set -g pane-active-border-style fg=#e0af68" "if-shell \"[ \\\"$TMUX_IN_SSH\\\" = \\\"1\\\" ]\" \"set -g pane-active-border-style fg=#f7768e\" \"set -g pane-active-border-style fg=#7aa2f7\""'

# Change status bar color when a pane is running SSH
set-hook -ag window-pane-changed 'if-shell "[ \"$TMUX_IN_SSH\" = \"0\" ] && ps -o state= -o comm= -t \"#{pane_tty}\" | grep -iqE \"ssh\"" "set -g status-left \"#[fg=#323640,bg=#e0af68,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S #[fg=#e0af68,bg=default]\"" "if-shell \"[ \\\"$TMUX_IN_SSH\\\" = \\\"1\\\" ]\" \"set -g status-left \\\"#[fg=#323640,bg=#f7768e,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S #[fg=#f7768e,bg=default]\\\"\" \"set -g status-left \\\"#[fg=#323640,bg=#7aa2f7,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S #[fg=#7aa2f7,bg=default]\\\"\""'
set-hook -ag after-split-window 'if-shell "[ \"$TMUX_IN_SSH\" = \"0\" ] && ps -o state= -o comm= -t \"#{pane_tty}\" | grep -iqE \"ssh\"" "set -g status-left \"#[fg=#323640,bg=#e0af68,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S #[fg=#e0af68,bg=default]\"" "if-shell \"[ \\\"$TMUX_IN_SSH\\\" = \\\"1\\\" ]\" \"set -g status-left \\\"#[fg=#323640,bg=#f7768e,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S #[fg=#f7768e,bg=default]\\\"\" \"set -g status-left \\\"#[fg=#323640,bg=#7aa2f7,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S #[fg=#7aa2f7,bg=default]\\\"\""'
set-hook -ag pane-focus-in 'if-shell "[ \"$TMUX_IN_SSH\" = \"0\" ] && ps -o state= -o comm= -t \"#{pane_tty}\" | grep -iqE \"ssh\"" "set -g status-left \"#[fg=#323640,bg=#e0af68,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S #[fg=#e0af68,bg=default]\"" "if-shell \"[ \\\"$TMUX_IN_SSH\\\" = \\\"1\\\" ]\" \"set -g status-left \\\"#[fg=#323640,bg=#f7768e,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S #[fg=#f7768e,bg=default]\\\"\" \"set -g status-left \\\"#[fg=#323640,bg=#7aa2f7,bold] #{?client_prefix,󰠠 ,#[dim]󰤂 }#[bold,nodim]#S #[fg=#7aa2f7,bg=default]\\\"\""'

