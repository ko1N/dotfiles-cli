# terminal color configuration
set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm-256color:RGB"
set-option -gw xterm-keys on

# prefix
# set -g prefix C-s
# bind C-s send-prefix
set -g prefix C-Space
bind C-Space send-prefix

# home row mod prefix
set -g prefix2 C-f
bind C-f send-prefix
#set -g prefix C-j
#bind C-k send-prefix

# global options
set -g base-index 1              # start windows at index 0 / alternative: 1
# set -g pane-base-index 1
# set-window-option -g pane-base-index 1
set -g detach-on-destroy off     # don't exit from tmux when closing a session
set -g escape-time 0             # zero-out escape time delay
set -g history-limit 1000000     # increase scroll history
set -g renumber-windows on       # renumber windows if they are closed
set -g set-clipboard on          # use system clipboard
set -g status-position bottom    # status bar position
setw -g mode-keys vi             # enable vi keybinds
set -g mouse on                  # enable mouse

# reload config
unbind r
bind r source-file ~/.tmux.conf \; display ".tmux.conf reloaded"

# Dynamic split creation with M-Enter
# Split horizontally if pane is wider than tall (accounting for character aspect ratio)
bind-key -n 'M-Enter' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    'split-window -h -c "#{pane_current_path}"' \
    'if-shell "[ $(tmux display-message -p \"#{pane_width}\") -gt $(( $(tmux display-message -p \"#{pane_height}\") * 25 / 10 )) ]" \
        "split-window -h -c \"#{pane_current_path}\"" \
        "split-window -v -c \"#{pane_current_path}\""'
bind-key -n 'M-\' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    'split-window -v -c "#{pane_current_path}"' \
    'if-shell "[ $(tmux display-message -p \"#{pane_width}\") -gt $(( $(tmux display-message -p \"#{pane_height}\") * 25 / 10 )) ]" \
        "split-window -v -c \"#{pane_current_path}\"" \
        "split-window -h -c \"#{pane_current_path}\""'

# Create new window - TODO: is it ever used?
# bind-key -n 'M-S-Enter' new-window

# TODO: fixme - not sure if this works
# always start new panes in the current pwd
bind 's' split-window -v -c "#{pane_current_path}"
bind 'h' split-window -h -c "#{pane_current_path}"

# switching windows
bind-key -n 'M-Tab' next-window
bind-key -n 'M-S-Tab' previous-window # TODO: doesnt work on most terminals

# Navigate panes but do not wrap-around
# TODO: is there a smarter/easier way to do this?
bind-key -n 'M-h' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    '' \
    'if-shell "[ $(tmux display-message -p \"#{pane_at_left}\") -eq 1 ]" \
        "" \
        "select-pane -L"'
bind-key -n 'M-j' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    '' \
    'if-shell "[ $(tmux display-message -p \"#{pane_at_bottom}\") -eq 1 ]" \
        "" \
        "select-pane -D"'
bind-key -n 'M-k' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    '' \
    'if-shell "[ $(tmux display-message -p \"#{pane_at_top}\") -eq 1 ]" \
        "" \
        "select-pane -U"'
bind-key -n 'M-l' if-shell -b '[ "$(tmux display-message -p "#{window_panes}")" -eq 1 ]' \
    '' \
    'if-shell "[ $(tmux display-message -p \"#{pane_at_right}\") -eq 1 ]" \
        "" \
        "select-pane -R"'

# Select window or create it if it doesn't exist
bind-key -n 'M-0' if-shell 'tmux select-window -t :=0' '' 'new-window -t :=0'
bind-key -n 'M-1' if-shell 'tmux select-window -t :=1' '' 'new-window -t :=1'
bind-key -n 'M-2' if-shell 'tmux select-window -t :=2' '' 'new-window -t :=2'
bind-key -n 'M-3' if-shell 'tmux select-window -t :=3' '' 'new-window -t :=3'
bind-key -n 'M-4' if-shell 'tmux select-window -t :=4' '' 'new-window -t :=4'
bind-key -n 'M-5' if-shell 'tmux select-window -t :=5' '' 'new-window -t :=5'
bind-key -n 'M-6' if-shell 'tmux select-window -t :=6' '' 'new-window -t :=6'
bind-key -n 'M-7' if-shell 'tmux select-window -t :=7' '' 'new-window -t :=7'
bind-key -n 'M-8' if-shell 'tmux select-window -t :=8' '' 'new-window -t :=8'
bind-key -n 'M-9' if-shell 'tmux select-window -t :=9' '' 'new-window -t :=9'

# Resize panes using ctrl+alt+hjkl
bind-key -n 'C-M-h' resize-pane -L 6
bind-key -n 'C-M-j' resize-pane -D 6
bind-key -n 'C-M-k' resize-pane -U 6
bind-key -n 'C-M-l' resize-pane -R 6

# Re-order panes via alt+shift+hjkl
# TODO: doesn't work on most terminals
bind-key -n 'M-S-h' swap-pane -U
bind-key -n 'M-S-j' swap-pane -D
bind-key -n 'M-S-k' swap-pane -U
bind-key -n 'M-S-l' swap-pane -D

# Re-order panes differently
bind-key -n 'M-[' swap-pane -U
bind-key -n 'M-]' swap-pane -D

# Copy mode bindings (hjkl, C-u, C-d, V are set by default)
bind-key [ copy-mode
bind-key v copy-mode
bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "xclip -selection clipboard"
# Alternative for macOS (uncomment if on macOS)
# bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "pbcopy"
# Alternative for WSL (uncomment if on WSL)
# bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel "clip.exe"
bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
bind-key -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle
bind-key -T copy-mode-vi 'C-c' run-shell 'tmux display-message -p "#{selection_present}" | grep -q "1" && tmux send-keys -X clear-selection || tmux send-keys -X cancel'
bind-key -T copy-mode-vi 'Escape' send-keys -X cancel
bind-key -T copy-mode-vi 'q' send-keys -X cancel
bind-key -T copy-mode-vi '/' send-keys -X search-forward
bind-key -T copy-mode-vi '?' send-keys -X search-backward
bind-key -T copy-mode-vi '^' send-keys -X start-of-line
bind-key -T copy-mode-vi '_' send-keys -X start-of-line
bind-key -T copy-mode-vi '$' send-keys -X end-of-line
bind-key -T copy-mode-vi 'g' send-keys -X history-top
bind-key -T copy-mode-vi 'G' send-keys -X history-bottom

# TODO: copy-paste mode + binding for yanking

# Pane border with dynamic colors
%hidden border_background="#323640"
%hidden border_default="#00ffd2"
%hidden border_ssh_pane="#ff4498" # hardcoded due to tmux limitation
%hidden border_in_ssh="#ff4499" # hardcoded due to tmux limitation

# Dynamic border coloring (based on ssh status)
set -g pane-border-style "fg=#{border_background}"

# Set a variable to track if we're in an SSH session
if-shell '[ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]' \
  'set-environment -g TMUX_IN_SSH "1"' \
  'set-environment -g TMUX_IN_SSH "0"'

# Test ssh colors
# set-environment -g TMUX_IN_SSH "1"

# Set initial border color based on SSH session status
if-shell '[ "$TMUX_IN_SSH" = "1" ]' \
  'set -g pane-active-border-style fg=#ff4499; setw -g window-status-style fg=#ff4499' \
  'set -g pane-active-border-style fg=#8bcd5b; setw -g window-status-style fg=#8bcd5b'
set-hook -g window-pane-changed \
  'if-shell "[ \"$TMUX_IN_SSH\" = \"0\" ] && ps -o state= -o comm= -t \"#{pane_tty}\" | grep -iqE \"ssh\"" \
    "set -g pane-active-border-style fg=#ff4498; set -g window-status-current-style fg=#ff4498" \
    "if-shell \"[ \\\"$TMUX_IN_SSH\\\" = \\\"1\\\" ]\" \
      \"set -g pane-active-border-style fg=#ff4499; set -g window-status-current-style fg=#ff4499\" \
      \"set -g pane-active-border-style fg=#8bcd5b; set -g window-status-current-style fg=#8bcd5b\""'
set-hook -g after-split-window \
  'if-shell "[ \"$TMUX_IN_SSH\" = \"0\" ] && ps -o state= -o comm= -t \"#{pane_tty}\" | grep -iqE \"ssh\"" \
    "set -g pane-active-border-style fg=#ff4498; set -g window-status-current-style fg=#ff4498" \
    "if-shell \"[ \\\"$TMUX_IN_SSH\\\" = \\\"1\\\" ]\" \
      \"set -g pane-active-border-style fg=#ff4499; set -g window-status-current-style fg=#ff4499\" \
      \"set -g pane-active-border-style fg=#8bcd5b; set -g window-status-current-style fg=#8bcd5b\""'
set-hook -g pane-focus-in \
  'if-shell "[ \"$TMUX_IN_SSH\" = \"0\" ] && ps -o state= -o comm= -t \"#{pane_tty}\" | grep -iqE \"ssh\"" \
    "set -g pane-active-border-style fg=#ff4498; set -g window-status-current-style fg=#ff4498" \
    "if-shell \"[ \\\"$TMUX_IN_SSH\\\" = \\\"1\\\" ]\" \
      \"set -g pane-active-border-style fg=#ff4499; set -g window-status-current-style fg=#ff4499\" \
      \"set -g pane-active-border-style fg=#8bcd5b; set -g window-status-current-style fg=#8bcd5b\""'

# Statusbar
set -g status-style "fg=#8bcd5b bg=#2a324a" # set fg to 'highlight'-color
set -g status-left-length 100
set -g status-left '#[fg=default] #S #[fg=#93a4c3]| #{?client_prefix,#[fg=default]H^,H } '
setw -g window-status-style "fg=#93a4c3"
setw -g window-status-current-style "fg=#8bcd5b"
